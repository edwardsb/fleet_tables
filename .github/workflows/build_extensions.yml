name: Go Build and Release

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          repository: fleetdm/fleet


      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod

      - name: Build macOS binaries
        run: |
          CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 go build -o fleetd_tables_amd64 ./orbit/cmd/fleetd_tables
          CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 go build -o fleetd_tables_arm64 ./orbit/cmd/fleetd_tables

      - name: Build Linux and Windows binaries
        run: |
          CGO_ENABLED=1 GOOS=linux go build -o fleetd_tables_linux ./orbit/cmd/fleetd_tables
          CGO_ENABLED=1 GOOS=windows go build -o fleetd_tables_windows ./orbit/cmd/fleetd_tables 

      - name: Upload binaries to workspace
        uses: actions/upload-artifact@v2
        with:
          name: binaries
          path: |
            fleetd_tables_amd64
            fleetd_tables_arm64
            fleetd_tables_linux
            fleetd_tables_windows

  lipo-macOS:
    runs-on: macos-latest
    needs: build

    steps:
      - uses: actions/checkout@v2

      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries

      - name: Create universal binary for macOS
        run: |
          lipo -create fleetd_tables_amd64 fleetd_tables_arm64 -output fleetd_tables_darwin_universal.ext

      - name: Upload macOS universal binary to workspace
        uses: actions/upload-artifact@v2
        with:
          name: macos-universal
          path: fleetd_tables_darwin_universal.ext

  artifact-upload:
    runs-on: ubuntu-latest
    needs: [build, lipo-macOS]

    steps:
      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          name: binaries

      - name: Download macOS universal binary
        uses: actions/download-artifact@v3
        with:
          name: macos-universal

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./path/to/your/assets
          asset_name: asset-name.zip
          asset_content_type: application/zip
